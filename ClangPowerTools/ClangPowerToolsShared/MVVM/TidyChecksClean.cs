using System.Collections.Generic;

namespace ClangPowerTools
{
  public class TidyChecksClean
  {
    public List<TidyCheckModel> Checks { get; set; } = new List<TidyCheckModel>
  {
    new TidyCheckModel{Name = "abseil-duration-addition", Description = "Check for cases where addition should be performed in the absl::Time domain. When adding two values, and one is known to be an absl::Time, we can infer that the other should be interpreted as an absl::Duration of a similar scale, and make that inference explicit.", IsChecked = false },
    new TidyCheckModel{Name = "abseil-duration-comparison", Description = "Checks for comparisons which should be in the absl::Duration domain instead of the floating point or integer domains.", IsChecked = false },
    new TidyCheckModel{Name = "abseil-duration-conversion-cast", Description = "Checks for casts of absl::Duration conversion functions, and recommends the right conversion function instead.", IsChecked = false },
    new TidyCheckModel{Name = "abseil-duration-division", Description = "absl::Duration arithmetic works like it does with integers. That means that division of two absl::Duration objects returns an int64 with any fractional component truncated toward 0. See this link for more information on arithmetic with absl::Duration.", IsChecked = false },
    new TidyCheckModel{Name = "abseil-duration-factory-float", Description = "Checks for cases where the floating-point overloads of various absl::Duration factory functions are called when the more-efficient integer versions could be used instead.", IsChecked = false },
    new TidyCheckModel{Name = "abseil-duration-factory-scale", Description = "Checks for cases where arguments to absl::Duration factory functions are scaled internally and could be changed to a different factory function. This check also looks for arguements with a zero value and suggests using absl::ZeroDuration() instead.", IsChecked = false },
    new TidyCheckModel{Name = "abseil-duration-subtraction", Description = "Checks for cases where subtraction should be performed in the absl::Duration domain. When subtracting two values, and the first one is known to be a conversion from absl::Duration, we can infer that the second should also be interpreted as an absl::Duration, and make that inference explicit.", IsChecked = false },
    new TidyCheckModel{Name = "abseil-duration-unnecessary-conversion", Description = "Finds and fixes cases where absl::Duration values are being converted to numeric types and back again.", IsChecked = false },
    new TidyCheckModel{Name = "abseil-faster-strsplit-delimiter", Description = "Finds instances of absl::StrSplit() or absl::MaxSplits() where the delimiter is a single character string literal and replaces with a character. The check will offer a suggestion to change the string literal into a character. It will also catch code using absl::ByAnyChar() for just a single character and will transform that into a single character as well.", IsChecked = false },
    new TidyCheckModel{Name = "abseil-no-internal-dependencies", Description = "Warns if code using Abseil depends on internal details. If something is in a namespace that includes the word “internal”, code is not allowed to depend upon it beaucse it’s an implementation detail. They cannot friend it, include it, you mention it or refer to it in any way. Doing so violates Abseil’s compatibility guidelines and may result in breakage. See https://abseil.io/about/compatibility for more information.", IsChecked = false },
    new TidyCheckModel{Name = "abseil-no-namespace", Description = "Ensures code does not open namespace absl as that violates Abseil’s compatibility guidelines. Code should not open namespace absl as that conflicts with Abseil’s compatibility guidelines and may result in breakage.", IsChecked = false },
    new TidyCheckModel{Name = "abseil-redundant-strcat-calls", Description = "Suggests removal of unnecessary calls to absl::StrCat when the result is being passed to another call to absl::StrCat or absl::StrAppend.", IsChecked = false },
    new TidyCheckModel{Name = "abseil-str-cat-append", Description = "Flags uses of absl::StrCat() to append to a std::string. Suggests absl::StrAppend() should be used instead.", IsChecked = false },
    new TidyCheckModel{Name = "abseil-string-find-startswith", Description = "Checks whether a std::string::find() result is compared with 0, and suggests replacing with absl::StartsWith(). This is both a readability and performance issue.", IsChecked = false },
    new TidyCheckModel{Name = "abseil-time-comparison", Description = "Prefer comparisons in the absl::Time domain instead of the integer domain.", IsChecked = false },
    new TidyCheckModel{Name = "abseil-time-subtraction", Description = "Finds and fixes absl::Time subtraction expressions to do subtraction in the Time domain instead of the numeric domain.", IsChecked = false },
    new TidyCheckModel{Name = "abseil-upgrade-duration-conversions", Description = "Finds calls to absl::Duration arithmetic operators and factories whose argument needs an explicit cast to continue compiling after upcoming API changes.", IsChecked = false },
    new TidyCheckModel{Name = "android-cloexec-accept", Description = "The usage of accept() is not recommended, it’s better to use accept4(). Without this flag, an opened sensitive file descriptor would remain open across a fork+exec to a lower-privileged SELinux domain.", IsChecked = false },
    new TidyCheckModel{Name = "android-cloexec-accept4", Description = "accept4() should include SOCK_CLOEXEC in its type argument to avoid the file descriptor leakage. Without this flag, an opened sensitive file would remain open across a fork+exec to a lower-privileged SELinux domain.", IsChecked = false },
    new TidyCheckModel{Name = "android-cloexec-creat", Description = "The usage of creat() is not recommended, it’s better to use open().", IsChecked = false },
    new TidyCheckModel{Name = "android-cloexec-dup", Description = "The usage of dup() is not recommended, it’s better to use fcntl(), which can set the close-on-exec flag. Otherwise, an opened sensitive file would remain open across a fork+exec to a lower-privileged SELinux domain.", IsChecked = false },
    new TidyCheckModel{Name = "android-cloexec-epoll-create", Description = "The usage of epoll_create() is not recommended, it’s better to use epoll_create1(), which allows close-on-exec.", IsChecked = false },
    new TidyCheckModel{Name = "android-cloexec-epoll-create1", Description = "epoll_create1() should include EPOLL_CLOEXEC in its type argument to avoid the file descriptor leakage. Without this flag, an opened sensitive file would remain open across a fork+exec to a lower-privileged SELinux domain.", IsChecked = false },
    new TidyCheckModel{Name = "android-cloexec-fopen", Description = "fopen() should include e in their mode string; so re would be valid. This is equivalent to having set FD_CLOEXEC on that descriptor.", IsChecked = false },
    new TidyCheckModel{Name = "android-cloexec-inotify-init", Description = "The usage of inotify_init() is not recommended, it’s better to use inotify_init1().", IsChecked = false },
    new TidyCheckModel{Name = "android-cloexec-inotify-init1", Description = "inotify_init1() should include IN_CLOEXEC in its type argument to avoid the file descriptor leakage. Without this flag, an opened sensitive file would remain open across a fork+exec to a lower-privileged SELinux domain.", IsChecked = false },
    new TidyCheckModel{Name = "android-cloexec-memfd-create", Description = "memfd_create() should include MFD_CLOEXEC in its type argument to avoid the file descriptor leakage. Without this flag, an opened sensitive file would remain open across a fork+exec to a lower-privileged SELinux domain.", IsChecked = false },
    new TidyCheckModel{Name = "android-cloexec-open", Description = "A common source of security bugs is code that opens a file without using the O_CLOEXEC flag.  Without that flag, an opened sensitive file would remain open across a fork+exec to a lower-privileged SELinux domain, leaking that sensitive data. Open-like functions including open(), openat(), and open64() should include O_CLOEXEC in their flags argument.", IsChecked = false },
    new TidyCheckModel{Name = "android-cloexec-pipe", Description = "This check detects usage of pipe(). Using pipe() is not recommended, pipe2() is the suggested replacement. The check also adds the O_CLOEXEC flag that marks the file descriptor to be closed in child processes. Without this flag a sensitive file descriptor can be leaked to a child process, potentially into a lower-privileged SELinux domain.", IsChecked = false },
    new TidyCheckModel{Name = "android-cloexec-pipe2", Description = "This checks ensures that pipe2() is called with the O_CLOEXEC flag. The check also adds the O_CLOEXEC flag that marks the file descriptor to be closed in child processes. Without this flag a sensitive file descriptor can be leaked to a child process, potentially into a lower-privileged SELinux domain.", IsChecked = false },
    new TidyCheckModel{Name = "android-cloexec-socket", Description = "socket() should include SOCK_CLOEXEC in its type argument to avoid the file descriptor leakage. Without this flag, an opened sensitive file would remain open across a fork+exec to a lower-privileged SELinux domain.", IsChecked = false },
    new TidyCheckModel{Name = "android-comparison-in-temp-failure-retry", Description = "Diagnoses comparisons that appear to be incorrectly placed in the argument to the TEMP_FAILURE_RETRY macro. Having such a use is incorrect in the vast majority of cases, and will often silently defeat the purpose of the TEMP_FAILURE_RETRY macro.", IsChecked = false },
    new TidyCheckModel{Name = "boost-use-to-string", Description = "This check finds conversion from integer type like int to std::string or std::wstring using boost::lexical_cast, and replace it with calls to std::to_string and std::to_wstring.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-argument-comment", Description = "Checks that argument comments match parameter names.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-assert-side-effect", Description = "Finds assert() with side effect.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-bool-pointer-implicit-conversion", Description = "Checks for conditions based on implicit conversion from a bool pointer to bool.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-branch-clone", Description = "Checks for repeated branches in if/else if/else chains, consecutive repeated branches in switch statements and indentical true and false branches in conditional operators.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-copy-constructor-init", Description = "Finds copy constructors where the constructor doesn’t call the copy constructor of the base class.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-dangling-handle", Description = "Detect dangling references in value handles like std::experimental::string_view. These dangling references can be a result of constructing handles from temporary values, where the temporary is destroyed soon after the handle is created.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-exception-escape", Description = "Finds functions which may throw an exception directly or indirectly, but they should not. The functions which should not throw exceptions are the following: * Destructors * Move constructors * Move assignment operators * The main() functions * swap() functions * Functions marked with throw() or noexcept * Other functions given as option", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-fold-init-type", Description = "The check flags type mismatches in folds like std::accumulate that might result in loss of precision. std::accumulate folds an input range into an initial value using the type of the latter, with operator+ by default. This can cause loss of precision through:", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-forward-declaration-namespace", Description = "Checks if an unused forward declaration is in a wrong namespace.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-forwarding-reference-overload", Description = "The check looks for perfect forwarding constructors that can hide copy or move constructors. If a non const lvalue reference is passed to the constructor, the forwarding reference parameter will be a better match than the const reference parameter of the copy constructor, so the perfect forwarding constructor will be called, which can be confusing. For detailed description of this issue see: Scott Meyers, Effective Modern C++, Item 26.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-inaccurate-erase", Description = "Checks for inaccurate use of the erase() method.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-incorrect-roundings", Description = "Checks the usage of patterns known to produce incorrect rounding. Programmers often use:", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-integer-division", Description = "Finds cases where integer division in a floating point context is likely to cause unintended loss of precision.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-lambda-function-name", Description = "Checks for attempts to get the name of a function from within a lambda expression. The name of a lambda is always something like operator(), which is almost never what was intended.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-macro-parentheses", Description = "Finds macros that can have unexpected behaviour due to missing parentheses.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-macro-repeated-side-effects", Description = "Checks for repeated argument with side effects in macros.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-misplaced-operator-in-strlen-in-alloc", Description = "Finds cases where 1 is added to the string in the argument to strlen(), strnlen(), strnlen_s(), wcslen(), wcsnlen(), and wcsnlen_s() instead of the result and the value is used as an argument to a memory allocation function (malloc(), calloc(), realloc(), alloca()) or the new[] operator in C++. The check detects error cases even if one of these functions (except the new[] operator) is called by a constant function pointer.  Cases where 1 is added both to the parameter and the result of the strlen()-like function are ignored, as are cases where the whole addition is surrounded by extra parentheses.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-misplaced-widening-cast", Description = "This check will warn when there is a cast of a calculation result to a bigger type. If the intention of the cast is to avoid loss of precision then the cast is misplaced, and there can be loss of precision. Otherwise the cast is ineffective.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-move-forwarding-reference", Description = "Warns if std::move is called on a forwarding reference, for example:", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-multiple-statement-macro", Description = "Detect multiple statement macros that are used in unbraced conditionals. Only the first statement of the macro will be inside the conditional and the other ones will be executed unconditionally.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-parent-virtual-call", Description = "Detects and fixes calls to grand-…parent virtual methods instead of calls to overridden parent’s virtual methods.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-posix-return", Description = "Checks if any calls to POSIX functions (except posix_openpt) expect negative return values. These functions return either 0 on success or an errno on failure, which is positive only.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-sizeof-container", Description = "The check finds usages of sizeof on expressions of STL container types. Most likely the user wanted to use .size() instead.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-sizeof-expression", Description = "The check finds usages of sizeof expressions which are most likely errors.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-string-constructor", Description = "Finds string constructors that are suspicious and probably errors.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-string-integer-assignment", Description = "The check finds assignments of an integer to std::basic_string&lt;CharT&gt; (std::string, std::wstring, etc.). The source of the problem is the following assignment operator of std::basic_string&lt;CharT&gt;:", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-string-literal-with-embedded-nul", Description = "Finds occurrences of string literal with embedded NUL character and validates their usage.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-suspicious-enum-usage", Description = "The checker detects various cases when an enum is probably misused (as a bitmask ).", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-suspicious-memset-usage", Description = "This check finds memset() calls with potential mistakes in their arguments. Considering the function as void* memset(void* destination, int fill_value, size_t byte_count), the following cases are covered:", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-suspicious-missing-comma", Description = "String literals placed side-by-side are concatenated at translation phase 6 (after the preprocessor). This feature is used to represent long string literal on multiple lines.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-suspicious-semicolon", Description = "Finds most instances of stray semicolons that unexpectedly alter the meaning of the code. More specifically, it looks for if, while, for and for-range statements whose body is a single semicolon, and then analyzes the context of the code (e.g. indentation) in an attempt to determine whether that is intentional.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-suspicious-string-compare", Description = "Find suspicious usage of runtime string comparison functions. This check is valid in C and C++.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-swapped-arguments", Description = "Finds potentially swapped arguments by looking at implicit conversions.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-terminating-continue", Description = "Detects do while loops with a condition always evaluating to false that have a continue statement, as this continue terminates the loop effectively.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-throw-keyword-missing", Description = "Warns about a potentially missing throw keyword. If a temporary object is created, but the object’s type derives from (or is the same as) a class that has ‘EXCEPTION’, ‘Exception’ or ‘exception’ in its name, we can assume that the programmer’s intention was to throw that object.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-too-small-loop-variable", Description = "Detects those for loops that have a loop variable with a “too small” type which means this type can’t represent all values which are part of the iteration range.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-undefined-memory-manipulation", Description = "Finds calls of memory manipulation functions memset(), memcpy() and memmove() on not TriviallyCopyable objects resulting in undefined behavior.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-undelegated-constructor", Description = "Finds creation of temporary objects in constructors that look like a function call to another constructor of the same class.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-unhandled-self-assignment", Description = "cert-oop54-cpp redirects here as an alias for this check. For the CERT alias, the WarnOnlyIfThisHasSuspiciousField option is set to 0.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-unused-raii", Description = "Finds temporaries that look like RAII objects.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-unused-return-value", Description = "Warns on unused function return values. The checked funtions can be configured.", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-use-after-move", Description = "Warns if an object is used after it has been moved, for example:", IsChecked = false },
    new TidyCheckModel{Name = "bugprone-virtual-near-miss", Description = "Warn if a function is a near miss (ie. the name is very similar and the function signiture is the same) to a virtual function from a base class.", IsChecked = false },
    new TidyCheckModel{Name = "cert-dcl03-c", Description = "The cert-dcl03-c check is an alias, please see misc-static-assert for more information.", IsChecked = false },
    new TidyCheckModel{Name = "cert-dcl16-c", Description = "The cert-dcl16-c check is an alias, please see readability-uppercase-literal-suffix for more information.", IsChecked = false },
    new TidyCheckModel{Name = "cert-dcl21-cpp", Description = "This check flags postfix operator++ and operator-- declarations if the return type is not a const object. This also warns if the return type is a reference type.", IsChecked = false },
    new TidyCheckModel{Name = "cert-dcl50-cpp", Description = "This check flags all function definitions (but not declarations) of C-style variadic functions.", IsChecked = false },
    new TidyCheckModel{Name = "cert-dcl54-cpp", Description = "The cert-dcl54-cpp check is an alias, please see misc-new-delete-overloads for more information.", IsChecked = false },
    new TidyCheckModel{Name = "cert-dcl58-cpp", Description = "Modification of the std or posix namespace can result in undefined behavior. This check warns for such modifications.", IsChecked = false },
    new TidyCheckModel{Name = "cert-dcl59-cpp", Description = "The cert-dcl59-cpp check is an alias, please see google-build-namespaces for more information.", IsChecked = false },
    new TidyCheckModel{Name = "cert-env33-c", Description = "This check flags calls to system(), popen(), and _popen(), which execute a command processor. It does not flag calls to system() with a null pointer argument, as such a call checks for the presence of a command processor but does not actually attempt to execute a command.", IsChecked = false },
    new TidyCheckModel{Name = "cert-err09-cpp", Description = "The cert-err09-cpp check is an alias, please see misc-throw-by-value-catch-by-reference for more information.", IsChecked = false },
    new TidyCheckModel{Name = "cert-err34-c", Description = "This check flags calls to string-to-number conversion functions that do not verify the validity of the conversion, such as atoi() or scanf(). It does not flag calls to strtol(), or other, related conversion functions that do perform better error checking.", IsChecked = false },
    new TidyCheckModel{Name = "cert-err52-cpp", Description = "This check flags all call expressions involving setjmp() and longjmp().", IsChecked = false },
    new TidyCheckModel{Name = "cert-err58-cpp", Description = "This check flags all static or thread_local variable declarations where the initializer for the object may throw an exception.", IsChecked = false },
    new TidyCheckModel{Name = "cert-err60-cpp", Description = "This check flags all throw expressions where the exception object is not nothrow copy constructible.", IsChecked = false },
    new TidyCheckModel{Name = "cert-err61-cpp", Description = "The cert-err61-cpp check is an alias, please see misc-throw-by-value-catch-by-reference for more information.", IsChecked = false },
    new TidyCheckModel{Name = "cert-fio38-c", Description = "The cert-fio38-c check is an alias, please see misc-non-copyable-objects for more information.", IsChecked = false },
    new TidyCheckModel{Name = "cert-flp30-c", Description = "This check flags for loops where the induction expression has a floating-point type.", IsChecked = false },
    new TidyCheckModel{Name = "cert-msc30-c", Description = "The cert-msc30-c check is an alias, please see cert-msc50-cpp for more information.", IsChecked = false },
    new TidyCheckModel{Name = "cert-msc32-c", Description = "The cert-msc32-c check is an alias, please see cert-msc51-cpp for more information.", IsChecked = false },
    new TidyCheckModel{Name = "cert-msc50-cpp", Description = "Pseudorandom number generators use mathematical algorithms to produce a sequence of numbers with good statistical properties, but the numbers produced are not genuinely random. The std::rand() function takes a seed (number), runs a mathematical operation on it and returns the result. By manipulating the seed the result can be predictable. This check warns for the usage of std::rand().", IsChecked = false },
    new TidyCheckModel{Name = "cert-msc51-cpp", Description = "This check flags all pseudo-random number engines, engine adaptor instantiations and srand() when initialized or seeded with default argument, constant expression or any user-configurable type. Pseudo-random number engines seeded with a predictable value may cause vulnerabilities e.g. in security protocols. This is a CERT security rule, see MSC51-CPP. Ensure your random number generator is properly seeded and MSC32-C. Properly seed pseudorandom number generators.", IsChecked = false },
    new TidyCheckModel{Name = "cert-oop11-cpp", Description = "The cert-oop11-cpp check is an alias, please see performance-move-constructor-init for more information.", IsChecked = false },
    new TidyCheckModel{Name = "cert-oop54-cpp", Description = "The cert-oop54-cpp check is an alias, please see bugprone-unhandled-self-assignment for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-core.CallAndMessage", Description = "The clang-analyzer-core.CallAndMessage check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-core.DivideZero", Description = "The clang-analyzer-core.DivideZero check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-core.DynamicTypePropagation", Description = "Generate dynamic type information", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-core.NonNullParamChecker", Description = "The clang-analyzer-core.NonNullParamChecker check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-core.NullDereference", Description = "The clang-analyzer-core.NullDereference check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-core.StackAddressEscape", Description = "The clang-analyzer-core.StackAddressEscape check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-core.UndefinedBinaryOperatorResult", Description = "The clang-analyzer-core.UndefinedBinaryOperatorResult check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-core.uninitialized.ArraySubscript", Description = "The clang-analyzer-core.uninitialized.ArraySubscript check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-core.uninitialized.Assign", Description = "The clang-analyzer-core.uninitialized.Assign check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-core.uninitialized.Branch", Description = "The clang-analyzer-core.uninitialized.Branch check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-core.uninitialized.CapturedBlockVariable", Description = "Check for blocks that capture uninitialized values", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-core.uninitialized.UndefReturn", Description = "The clang-analyzer-core.uninitialized.UndefReturn check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-core.VLASize", Description = "The clang-analyzer-core.VLASize check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-cplusplus.InnerPointer", Description = "Check for inner pointers of C++ containers used after re/deallocation", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-cplusplus.Move", Description = "The clang-analyzer-cplusplus.Move check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-cplusplus.NewDelete", Description = "The clang-analyzer-cplusplus.NewDelete check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-cplusplus.NewDeleteLeaks", Description = "The clang-analyzer-cplusplus.NewDeleteLeaks check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-deadcode.DeadStores", Description = "The clang-analyzer-deadcode.DeadStores check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-nullability.NullableDereferenced", Description = "The clang-analyzer-nullability.NullableDereferenced check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-nullability.NullablePassedToNonnull", Description = "The clang-analyzer-nullability.NullablePassedToNonnull check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-nullability.NullableReturnedFromNonnull", Description = "Warns when a nullable pointer is returned from a function that has _Nonnull return type.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-nullability.NullPassedToNonnull", Description = "The clang-analyzer-nullability.NullPassedToNonnull check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-nullability.NullReturnedFromNonnull", Description = "The clang-analyzer-nullability.NullReturnedFromNonnull check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-optin.cplusplus.UninitializedObject", Description = "The clang-analyzer-optin.cplusplus.UninitializedObject check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-optin.cplusplus.VirtualCall", Description = "The clang-analyzer-optin.cplusplus.VirtualCall check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-optin.mpi.MPI-Checker", Description = "The clang-analyzer-optin.mpi.MPI-Checker check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker", Description = "The clang-analyzer-optin.osx.cocoa.localizability.EmptyLocalizationContextChecker check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker", Description = "The clang-analyzer-optin.osx.cocoa.localizability.NonLocalizedStringChecker check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-optin.osx.OSObjectCStyleCast", Description = "Checker for C-style casts of OSObjects", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-optin.performance.GCDAntipattern", Description = "Check for performance anti-patterns when using Grand Central Dispatch", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-optin.performance.Padding", Description = "Check for excessively padded structs.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-optin.portability.UnixAPI", Description = "Finds implementation-defined behavior in UNIX/Posix functions", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.API", Description = "The clang-analyzer-osx.API check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.cocoa.AtSync", Description = "The clang-analyzer-osx.cocoa.AtSync check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.cocoa.AutoreleaseWrite", Description = "Warn about potentially crashing writes to autoreleasing objects from different autoreleasing pools in Objective-C", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.cocoa.ClassRelease", Description = "The clang-analyzer-osx.cocoa.ClassRelease check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.cocoa.Dealloc", Description = "The clang-analyzer-osx.cocoa.Dealloc check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.cocoa.IncompatibleMethodTypes", Description = "The clang-analyzer-osx.cocoa.IncompatibleMethodTypes check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.cocoa.Loops", Description = "Improved modeling of loops using Cocoa collection types", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.cocoa.MissingSuperCall", Description = "Warn about Objective-C methods that lack a necessary call to super", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.cocoa.NilArg", Description = "The clang-analyzer-osx.cocoa.NilArg check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.cocoa.NonNilReturnValue", Description = "Model the APIs that are guaranteed to return a non-nil value", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.cocoa.NSAutoreleasePool", Description = "The clang-analyzer-osx.cocoa.NSAutoreleasePool check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.cocoa.NSError", Description = "The clang-analyzer-osx.cocoa.NSError check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.cocoa.ObjCGenerics", Description = "The clang-analyzer-osx.cocoa.ObjCGenerics check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.cocoa.RetainCount", Description = "The clang-analyzer-osx.cocoa.RetainCount check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.cocoa.RunLoopAutoreleaseLeak", Description = "Check for leaked memory in autorelease pools that will never be drained", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.cocoa.SelfInit", Description = "The clang-analyzer-osx.cocoa.SelfInit check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.cocoa.SuperDealloc", Description = "The clang-analyzer-osx.cocoa.SuperDealloc check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.cocoa.UnusedIvars", Description = "The clang-analyzer-osx.cocoa.UnusedIvars check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.cocoa.VariadicMethodTypes", Description = "The clang-analyzer-osx.cocoa.VariadicMethodTypes check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.coreFoundation.CFError", Description = "The clang-analyzer-osx.coreFoundation.CFError check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.coreFoundation.CFNumber", Description = "The clang-analyzer-osx.coreFoundation.CFNumber check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.coreFoundation.CFRetainRelease", Description = "The clang-analyzer-osx.coreFoundation.CFRetainRelease check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.coreFoundation.containers.OutOfBounds", Description = "The clang-analyzer-osx.coreFoundation.containers.OutOfBounds check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.coreFoundation.containers.PointerSizedValues", Description = "The clang-analyzer-osx.coreFoundation.containers.PointerSizedValues check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.MIG", Description = "Find violations of the Mach Interface Generator calling convention", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.NumberObjectConversion", Description = "Check for erroneous conversions of objects representing numbers into numbers", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.ObjCProperty", Description = "Check for proper uses of Objective-C properties", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.OSObjectRetainCount", Description = "Check for leaks and improper reference count management for OSObject", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-osx.SecKeychainAPI", Description = "The clang-analyzer-osx.SecKeychainAPI check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-security.FloatLoopCounter", Description = "The clang-analyzer-security.FloatLoopCounter check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-security.insecureAPI.bcmp", Description = "The clang-analyzer-security.insecureAPI.bcmp check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-security.insecureAPI.bcopy", Description = "The clang-analyzer-security.insecureAPI.bcopy check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-security.insecureAPI.bzero", Description = "The clang-analyzer-security.insecureAPI.bzero check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling", Description = "The clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-security.insecureAPI.getpw", Description = "The clang-analyzer-security.insecureAPI.getpw check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-security.insecureAPI.gets", Description = "The clang-analyzer-security.insecureAPI.gets check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-security.insecureAPI.mkstemp", Description = "The clang-analyzer-security.insecureAPI.mkstemp check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-security.insecureAPI.mktemp", Description = "The clang-analyzer-security.insecureAPI.mktemp check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-security.insecureAPI.rand", Description = "The clang-analyzer-security.insecureAPI.rand check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-security.insecureAPI.strcpy", Description = "The clang-analyzer-security.insecureAPI.strcpy check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-security.insecureAPI.UncheckedReturn", Description = "The clang-analyzer-security.insecureAPI.UncheckedReturn check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-security.insecureAPI.vfork", Description = "The clang-analyzer-security.insecureAPI.vfork check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-unix.API", Description = "The clang-analyzer-unix.API check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-unix.cstring.BadSizeArg", Description = "The clang-analyzer-unix.cstring.BadSizeArg check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-unix.cstring.NullArg", Description = "The clang-analyzer-unix.cstring.NullArg check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-unix.Malloc", Description = "The clang-analyzer-unix.Malloc check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-unix.MallocSizeof", Description = "The clang-analyzer-unix.MallocSizeof check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-unix.MismatchedDeallocator", Description = "The clang-analyzer-unix.MismatchedDeallocator check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-unix.Vfork", Description = "The clang-analyzer-unix.Vfork check is an alias, please see Clang Static Analyzer Available Checkers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-valist.CopyToSelf", Description = "Check for va_lists which are copied onto itself.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-valist.Uninitialized", Description = "Check for usages of uninitialized (or already released) va_lists.", IsChecked = false },
    new TidyCheckModel{Name = "clang-analyzer-valist.Unterminated", Description = "Check for va_lists which are not released by a va_end call.", IsChecked = false },
    new TidyCheckModel{Name = "core.CallAndMessage", Description = "Check for logical errors for function calls and Objective-C message expressions (e.g., uninitialized arguments, null function pointers). ", IsChecked = false },
    new TidyCheckModel{Name = "core.DivideZero", Description = "Check for division by zero. ", IsChecked = false },
    new TidyCheckModel{Name = "core.NonNullParamChecker", Description = "Check for null pointers passed as arguments to a function whose arguments are marked with the nonnull attribute. ", IsChecked = false },
    new TidyCheckModel{Name = "core.NullDereference", Description = "Check for dereferences of null pointers. ", IsChecked = false },
    new TidyCheckModel{Name = "core.StackAddressEscape", Description = "Check that addresses of stack memory do not escape the function. ", IsChecked = false },
    new TidyCheckModel{Name = "core.UndefinedBinaryOperatorResult", Description = "Check for undefined results of binary operators. ", IsChecked = false },
    new TidyCheckModel{Name = "core.uninitialized.ArraySubscript", Description = "Check for uninitialized values used as array subscripts. ", IsChecked = false },
    new TidyCheckModel{Name = "core.uninitialized.Assign", Description = "Check for assigning uninitialized values. ", IsChecked = false },
    new TidyCheckModel{Name = "core.uninitialized.Branch", Description = "Check for uninitialized values used as branch conditions. ", IsChecked = false },
    new TidyCheckModel{Name = "core.uninitialized.CapturedBlockVariable", Description = "Check for blocks that capture uninitialized values. ", IsChecked = false },
    new TidyCheckModel{Name = "core.uninitialized.UndefReturn", Description = "Check for uninitialized values being returned to the caller. ", IsChecked = false },
    new TidyCheckModel{Name = "core.VLASize", Description = "Check for declarations of VLA of undefined or zero size. ", IsChecked = false },
    new TidyCheckModel{Name = "cplusplus.NewDelete", Description = "Check for double-free, use-after-free and offset problems involving C++  delete. ", IsChecked = false },
    new TidyCheckModel{Name = "cplusplus.NewDeleteLeaks", Description = "Check for memory leaks. Traces memory managed by new/ delete. ", IsChecked = false },
    new TidyCheckModel{Name = "cplusplus.UninitializedObject", Description = "This checker reports uninitialized fields in objects created after a constructor call. It doesn't only find direct uninitialized fields, but rather makes a deep inspection of the object, analyzing all of it's fields subfields.  The checker regards inherited fields as direct fields, so one will recieve warnings for uninitialized inherited data members as well.  It has several options: \"Pedantic\" (boolean). If its not set or is set to false, the  checker won't emit warnings for objects that don't have at least one  initialized field. This may be set with -analyzer-config cplusplus.UninitializedObject:Pedantic=true. \"NotesAsWarnings\" (boolean). If set to true, the checker will emit a warning for each uninitalized field, as opposed to emitting one warning per constructor call, and listing the uninitialized fields that belongs to it in notes. Defaults to false.  -analyzer-config cplusplus.UninitializedObject:NotesAsWarnings=true.\"CheckPointeeInitialization\" (boolean). If set to false, the checker will not analyze the pointee of pointer/reference fields, and will only check whether the object itself is initialized. Defaults to false.  -analyzer-config cplusplus.UninitializedObject:CheckPointeeInitialization=true. \"IgnoreRecordsWithField\" (string). If supplied, the checker  will not analyze structures that have a field with a name or type name that matches the given pattern. Defaults to \"\".  -analyzer-config cplusplus.UninitializedObject:IgnoreRecordsWithField=\"[Tt]ag|[Kk]ind\".", IsChecked = false },
    new TidyCheckModel{Name = "cppcoreguidelines-avoid-c-arrays", Description = "The cppcoreguidelines-avoid-c-arrays check is an alias, please see modernize-avoid-c-arrays for more information.", IsChecked = false },
    new TidyCheckModel{Name = "cppcoreguidelines-avoid-goto", Description = "The usage of goto for control flow is error prone and should be replaced with looping constructs. Only forward jumps in nested loops are accepted.", IsChecked = false },
    new TidyCheckModel{Name = "cppcoreguidelines-avoid-magic-numbers", Description = "The cppcoreguidelines-avoid-magic-numbers check is an alias, please see readability-magic-numbers for more information.", IsChecked = false },
    new TidyCheckModel{Name = "cppcoreguidelines-c-copy-assignment-signature", Description = "The cppcoreguidelines-c-copy-assignment-signature check is an alias, please see misc-unconventional-assign-operator for more information.", IsChecked = false },
    new TidyCheckModel{Name = "cppcoreguidelines-explicit-virtual-functions", Description = "The cppcoreguidelines-explicit-virtual-functions check is an alias, please see modernize-use-override for more information.", IsChecked = false },
    new TidyCheckModel{Name = "cppcoreguidelines-interfaces-global-init", Description = "This check flags initializers of globals that access extern objects, and therefore can lead to order-of-initialization problems.", IsChecked = false },
    new TidyCheckModel{Name = "cppcoreguidelines-macro-usage", Description = "Finds macro usage that is considered problematic because better language constructs exist for the task.", IsChecked = false },
    new TidyCheckModel{Name = "cppcoreguidelines-narrowing-conversions", Description = "Checks for silent narrowing conversions, e.g: int i = 0; i += 0.1;. While the issue is obvious in this former example, it might not be so in the following: void MyClass::f(double d) { int_member_ += d; }.", IsChecked = false },
    new TidyCheckModel{Name = "cppcoreguidelines-no-malloc", Description = "This check handles C-Style memory management using malloc(), realloc(), calloc() and free(). It warns about its use and tries to suggest the use of an appropriate RAII object. Furthermore, it can be configured to check against a user-specified list of functions that are used for memory management (e.g. posix_memalign()). See C++ Core Guidelines.", IsChecked = false },
    new TidyCheckModel{Name = "cppcoreguidelines-non-private-member-variables-in-classes", Description = "The cppcoreguidelines-non-private-member-variables-in-classes check is an alias, please see misc-non-private-member-variables-in-classes for more information.", IsChecked = false },
    new TidyCheckModel{Name = "cppcoreguidelines-owning-memory", Description = "This check implements the type-based semantics of gsl::owner&lt;T*&gt;, which allows static analysis on code, that uses raw pointers to handle resources like dynamic memory, but won’t introduce RAII concepts.", IsChecked = false },
    new TidyCheckModel{Name = "cppcoreguidelines-pro-bounds-array-to-pointer-decay", Description = "This check flags all array to pointer decays.", IsChecked = false },
    new TidyCheckModel{Name = "cppcoreguidelines-pro-bounds-constant-array-index", Description = "This check flags all array subscript expressions on static arrays and std::arrays that either do not have a constant integer expression index or are out of bounds (for std::array). For out-of-bounds checking of static arrays, see the -Warray-bounds Clang diagnostic.", IsChecked = false },
    new TidyCheckModel{Name = "cppcoreguidelines-pro-bounds-pointer-arithmetic", Description = "This check flags all usage of pointer arithmetic, because it could lead to an invalid pointer. Subtraction of two pointers is not flagged by this check.", IsChecked = false },
    new TidyCheckModel{Name = "cppcoreguidelines-pro-type-const-cast", Description = "This check flags all uses of const_cast in C++ code.", IsChecked = false },
    new TidyCheckModel{Name = "cppcoreguidelines-pro-type-cstyle-cast", Description = "This check flags all use of C-style casts that perform a static_cast downcast, const_cast, or reinterpret_cast.", IsChecked = false },
    new TidyCheckModel{Name = "cppcoreguidelines-pro-type-member-init", Description = "The check flags user-defined constructor definitions that do not initialize all fields that would be left in an undefined state by default construction, e.g. builtins, pointers and record types without user-provided default constructors containing at least one such type. If these fields aren’t initialized, the constructor will leave some of the memory in an undefined state.", IsChecked = false },
    new TidyCheckModel{Name = "cppcoreguidelines-pro-type-reinterpret-cast", Description = "This check flags all uses of reinterpret_cast in C++ code.", IsChecked = false },
    new TidyCheckModel{Name = "cppcoreguidelines-pro-type-static-cast-downcast", Description = "This check flags all usages of static_cast, where a base class is casted to a derived class. In those cases, a fix-it is provided to convert the cast to a dynamic_cast.", IsChecked = false },
    new TidyCheckModel{Name = "cppcoreguidelines-pro-type-union-access", Description = "This check flags all access to members of unions. Passing unions as a whole is not flagged.", IsChecked = false },
    new TidyCheckModel{Name = "cppcoreguidelines-pro-type-vararg", Description = "This check flags all calls to c-style vararg functions and all use of va_arg.", IsChecked = false },
    new TidyCheckModel{Name = "cppcoreguidelines-slicing", Description = "Flags slicing of member variables or vtable. Slicing happens when copying a derived object into a base object: the members of the derived object (both member variables and virtual member functions) will be discarded. This can be misleading especially for member function slicing, for example:", IsChecked = false },
    new TidyCheckModel{Name = "cppcoreguidelines-special-member-functions", Description = "The check finds classes where some but not all of the special member functions are defined.", IsChecked = false },
    new TidyCheckModel{Name = "deadcode.DeadStores", Description = "Check for values stored to variables that are never read afterwards. ", IsChecked = false },
    new TidyCheckModel{Name = "fuchsia-default-arguments-calls", Description = "Warns if a function or method is called with default arguments.", IsChecked = false },
    new TidyCheckModel{Name = "fuchsia-default-arguments-declarations", Description = "Warns if a function or method is declared with default parameters.", IsChecked = false },
    new TidyCheckModel{Name = "fuchsia-header-anon-namespaces", Description = "The fuchsia-header-anon-namespaces check is an alias, please see google-build-namespace for more information.", IsChecked = false },
    new TidyCheckModel{Name = "fuchsia-multiple-inheritance", Description = "Warns if a class inherits from multiple classes that are not pure virtual.", IsChecked = false },
    new TidyCheckModel{Name = "fuchsia-overloaded-operator", Description = "Warns if an operator is overloaded, except for the assignment (copy and move) operators.", IsChecked = false },
    new TidyCheckModel{Name = "fuchsia-restrict-system-includes", Description = "Checks for allowed system includes and suggests removal of any others.", IsChecked = false },
    new TidyCheckModel{Name = "fuchsia-statically-constructed-objects", Description = "Warns if global, non-trivial objects with static storage are constructed, unless the object is statically initialized with a constexpr constructor or has no explicit constructor.", IsChecked = false },
    new TidyCheckModel{Name = "fuchsia-trailing-return", Description = "Functions that have trailing returns are disallowed, except for those using decltype specifiers and lambda with otherwise unutterable return types.", IsChecked = false },
    new TidyCheckModel{Name = "fuchsia-virtual-inheritance", Description = "Warns if classes are defined with virtual inheritance.", IsChecked = false },
    new TidyCheckModel{Name = "google-build-explicit-make-pair", Description = "Check that make_pair’s template arguments are deduced.", IsChecked = false },
    new TidyCheckModel{Name = "google-build-namespaces", Description = "cert-dcl59-cpp redirects here as an alias for this check. fuchsia-header-anon-namespaces redirects here as an alias for this check.", IsChecked = false },
    new TidyCheckModel{Name = "google-build-using-namespace", Description = "Finds using namespace directives.", IsChecked = false },
    new TidyCheckModel{Name = "google-default-arguments", Description = "Checks that default arguments are not given for virtual methods.", IsChecked = false },
    new TidyCheckModel{Name = "google-explicit-constructor", Description = "Checks that constructors callable with a single argument and conversion operators are marked explicit to avoid the risk of unintentional implicit conversions.", IsChecked = false },
    new TidyCheckModel{Name = "google-global-names-in-headers", Description = "Flag global namespace pollution in header files. Right now it only triggers on using declarations and directives.", IsChecked = false },
    new TidyCheckModel{Name = "google-objc-avoid-nsobject-new", Description = "Finds calls to +new or overrides of it, which are prohibited by the Google Objective-C style guide.", IsChecked = false },
    new TidyCheckModel{Name = "google-objc-avoid-throwing-exception", Description = "Finds uses of throwing exceptions usages in Objective-C files.", IsChecked = false },
    new TidyCheckModel{Name = "google-objc-function-naming", Description = "Finds function declarations in Objective-C files that do not follow the pattern described in the Google Objective-C Style Guide.", IsChecked = false },
    new TidyCheckModel{Name = "google-objc-global-variable-declaration", Description = "Finds global variable declarations in Objective-C files that do not follow the pattern of variable names in Google’s Objective-C Style Guide.", IsChecked = false },
    new TidyCheckModel{Name = "google-readability-avoid-underscore-in-googletest-name", Description = "Checks whether there are underscores in googletest test and test case names in test macros:", IsChecked = false },
    new TidyCheckModel{Name = "google-readability-braces-around-statements", Description = "The google-readability-braces-around-statements check is an alias, please see readability-braces-around-statements for more information.", IsChecked = false },
    new TidyCheckModel{Name = "google-readability-casting", Description = "Finds usages of C-style casts.", IsChecked = false },
    new TidyCheckModel{Name = "google-readability-function-size", Description = "The google-readability-function-size check is an alias, please see readability-function-size for more information.", IsChecked = false },
    new TidyCheckModel{Name = "google-readability-namespace-comments", Description = "The google-readability-namespace-comments check is an alias, please see llvm-namespace-comment for more information.", IsChecked = false },
    new TidyCheckModel{Name = "google-readability-todo", Description = "Finds TODO comments without a username or bug number.", IsChecked = false },
    new TidyCheckModel{Name = "google-runtime-int", Description = "Finds uses of short, long and long long and suggest replacing them with u?intXX(_t)?.", IsChecked = false },
    new TidyCheckModel{Name = "google-runtime-operator", Description = "Finds overloads of unary operator &amp;.", IsChecked = false },
    new TidyCheckModel{Name = "google-runtime-references", Description = "Checks the usage of non-constant references in function parameters.", IsChecked = false },
    new TidyCheckModel{Name = "google-upgrade-googletest-case", Description = "Finds uses of deprecated Google Test version 1.9 APIs with names containing case and replaces them with equivalent APIs with suite.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-avoid-c-arrays", Description = "The hicpp-avoid-c-arrays check is an alias, please see modernize-avoid-c-arrays for more information.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-avoid-goto", Description = "The hicpp-avoid-goto check is an alias to cppcoreguidelines-avoid-goto. Rule 6.3.1 High Integrity C++ requires that goto only skips parts of a block and is not used for other reasons.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-braces-around-statements", Description = "The hicpp-braces-around-statements check is an alias, please see readability-braces-around-statements for more information. It enforces the rule 6.1.1.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-deprecated-headers", Description = "The hicpp-deprecated-headers check is an alias, please see modernize-deprecated-headers for more information. It enforces the rule 1.3.3.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-exception-baseclass", Description = "Ensure that every value that in a throw expression is an instance of std::exception.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-explicit-conversions", Description = "This check is an alias for google-explicit-constructor. Used to enforce parts of rule 5.4.1. This check will enforce that constructors and conversion operators are marked explicit. Other forms of casting checks are implemented in other places. The following checks can be used to check for more forms of casting:", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-function-size", Description = "This check is an alias for readability-function-size. Useful to enforce multiple sections on function complexity.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-invalid-access-moved", Description = "This check is an alias for bugprone-use-after-move.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-member-init", Description = "This check is an alias for cppcoreguidelines-pro-type-member-init. Implements the check for rule 12.4.2 to initialize class members in the right order.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-move-const-arg", Description = "The hicpp-move-const-arg check is an alias, please see performance-move-const-arg for more information. It enforces the rule 17.3.1.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-multiway-paths-covered", Description = "This check discovers situations where code paths are not fully-covered. It furthermore suggests using if instead of switch if the code will be more clear. The rule 6.1.2 and rule 6.1.4 of the High Integrity C++ Coding Standard are enforced.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-named-parameter", Description = "This check is an alias for readability-named-parameter.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-new-delete-operators", Description = "This check is an alias for misc-new-delete-overloads. Implements rule 12.3.1 to ensure the new and delete operators have the correct signature.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-no-array-decay", Description = "The hicpp-no-array-decay check is an alias, please see cppcoreguidelines-pro-bounds-array-to-pointer-decay for more information. It enforces the rule 4.1.1.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-no-assembler", Description = "Check for assembler statements. No fix is offered.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-noexcept-move", Description = "This check is an alias for misc-noexcept-moveconstructor. Checks rule 12.5.4 to mark move assignment and move construction noexcept.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-no-malloc", Description = "The hicpp-no-malloc check is an alias, please see cppcoreguidelines-no-malloc for more information. It enforces the rule 5.3.2.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-signed-bitwise", Description = "Finds uses of bitwise operations on signed integer types, which may lead to undefined or implementation defined behaviour.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-special-member-functions", Description = "This check is an alias for cppcoreguidelines-special-member-functions. Checks that special member functions have the correct signature, according to rule 12.5.7.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-static-assert", Description = "The hicpp-static-assert check is an alias, please see misc-static-assert for more information. It enforces the rule 7.1.10.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-undelegated-constructor", Description = "This check is an alias for bugprone-undelegated-constructor. Partially implements rule 12.4.5 to find misplaced constructor calls inside a constructor.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-uppercase-literal-suffix", Description = "The hicpp-uppercase-literal-suffix check is an alias, please see readability-uppercase-literal-suffix for more information.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-use-auto", Description = "The hicpp-use-auto check is an alias, please see modernize-use-auto for more information. It enforces the rule 7.1.8.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-use-emplace", Description = "The hicpp-use-emplace check is an alias, please see modernize-use-emplace for more information. It enforces the rule 17.4.2.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-use-equals-default", Description = "This check is an alias for modernize-use-equals-default. Implements rule 12.5.1 to explicitly default special member functions.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-use-equals-delete", Description = "This check is an alias for modernize-use-equals-delete. Implements rule 12.5.1 to explicitly default or delete special member functions.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-use-noexcept", Description = "The hicpp-use-noexcept check is an alias, please see modernize-use-noexcept for more information. It enforces the rule 1.3.5.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-use-nullptr", Description = "The hicpp-use-nullptr check is an alias, please see modernize-use-nullptr for more information. It enforces the rule 2.5.3.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-use-override", Description = "This check is an alias for modernize-use-override. Implements rule 10.2.1 to declare a virtual function override when overriding.", IsChecked = false },
    new TidyCheckModel{Name = "hicpp-vararg", Description = "The hicpp-vararg check is an alias, please see cppcoreguidelines-pro-type-vararg for more information. It enforces the rule 14.1.1.", IsChecked = false },
    new TidyCheckModel{Name = "linuxkernel-must-use-errs", Description = "Checks Linux kernel code to see if it uses the results from the functions in linux/err.h. Also checks to see if code uses the results from functions that directly return a value from one of these error functions.", IsChecked = false },
    new TidyCheckModel{Name = "llvm-header-guard", Description = "Finds and fixes header guards that do not adhere to LLVM style.", IsChecked = false },
    new TidyCheckModel{Name = "llvm-include-order", Description = "Checks the correct order of #includes.", IsChecked = false },
    new TidyCheckModel{Name = "llvm-namespace-comment", Description = "google-readability-namespace-comments redirects here as an alias for this check.", IsChecked = false },
    new TidyCheckModel{Name = "llvm-prefer-isa-or-dyn-cast-in-conditionals", Description = "Looks at conditionals and finds and replaces cases of cast&lt;&gt;, which will assert rather than return a null pointer, and dyn_cast&lt;&gt; where the return value is not captured. Additionally, finds and replaces cases that match the pattern var &amp;&amp; isa&lt;X&gt;(var), where var is evaluated twice.", IsChecked = false },
    new TidyCheckModel{Name = "llvm-twine-local", Description = "Looks for local Twine variables which are prone to use after frees and should be generally avoided.", IsChecked = false },
    new TidyCheckModel{Name = "misc-definitions-in-headers", Description = "Finds non-extern non-inline function and variable definitions in header files, which can lead to potential ODR violations in case these headers are included from multiple translation units.", IsChecked = false },
    new TidyCheckModel{Name = "misc-misplaced-const", Description = "This check diagnoses when a const qualifier is applied to a typedef to a pointer type rather than to the pointee, because such constructs are often misleading to developers because the const applies to the pointer rather than the pointee.", IsChecked = false },
    new TidyCheckModel{Name = "misc-new-delete-overloads", Description = "cert-dcl54-cpp redirects here as an alias for this check.", IsChecked = false },
    new TidyCheckModel{Name = "misc-non-copyable-objects", Description = "cert-fio38-c redirects here as an alias for this check.", IsChecked = false },
    new TidyCheckModel{Name = "misc-non-private-member-variables-in-classes", Description = "cppcoreguidelines-non-private-member-variables-in-classes redirects here as an alias for this check.", IsChecked = false },
    new TidyCheckModel{Name = "misc-redundant-expression", Description = "Detect redundant expressions which are typically errors due to copy-paste.", IsChecked = false },
    new TidyCheckModel{Name = "misc-static-assert", Description = "cert-dcl03-c redirects here as an alias for this check.", IsChecked = false },
    new TidyCheckModel{Name = "misc-throw-by-value-catch-by-reference", Description = "cert-err09-cpp redirects here as an alias for this check. cert-err61-cpp redirects here as an alias for this check.", IsChecked = false },
    new TidyCheckModel{Name = "misc-unconventional-assign-operator", Description = "Finds declarations of assign operators with the wrong return and/or argument types and definitions with good return type but wrong return statements.", IsChecked = false },
    new TidyCheckModel{Name = "misc-uniqueptr-reset-release", Description = "Find and replace unique_ptr::reset(release()) with std::move().", IsChecked = false },
    new TidyCheckModel{Name = "misc-unused-alias-decls", Description = "Finds unused namespace alias declarations.", IsChecked = false },
    new TidyCheckModel{Name = "misc-unused-parameters", Description = "Finds unused function parameters. Unused parameters may signify a bug in the code (e.g. when a different parameter is used instead). The suggested fixes either comment parameter name out or remove the parameter completely, if all callers of the function are in the same translation unit and can be updated.", IsChecked = false },
    new TidyCheckModel{Name = "misc-unused-using-decls", Description = "Finds unused using declarations.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-avoid-bind", Description = "The check finds uses of std::bind and replaces simple uses with lambdas. Lambdas will use value-capture where required.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-avoid-c-arrays", Description = "cppcoreguidelines-avoid-c-arrays redirects here as an alias for this check.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-concat-nested-namespaces", Description = "Checks for use of nested namespaces such as namespace a { namespace b { ... } } and suggests changing to the more concise syntax introduced in C++17: namespace a::b { ... }. Inline namespaces are not modified.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-deprecated-headers", Description = "Some headers from C library were deprecated in C++ and are no longer welcome in C++ codebases. Some have no effect in C++. For more details refer to the C++ 14 Standard [depr.c.headers] section.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-deprecated-ios-base-aliases", Description = "Detects usage of the deprecated member types of std::ios_base and replaces those that have a non-deprecated equivalent.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-loop-convert", Description = "This check converts for(...; ...; ...) loops to use the new range-based loops in C++11.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-make-shared", Description = "This check finds the creation of std::shared_ptr objects by explicitly calling the constructor and a new expression, and replaces it with a call to std::make_shared.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-make-unique", Description = "This check finds the creation of std::unique_ptr objects by explicitly calling the constructor and a new expression, and replaces it with a call to std::make_unique, introduced in C++14.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-pass-by-value", Description = "With move semantics added to the language and the standard library updated with move constructors added for many types it is now interesting to take an argument directly by value, instead of by const-reference, and then copy. This check allows the compiler to take care of choosing the best way to construct the copy.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-raw-string-literal", Description = "This check selectively replaces string literals containing escaped characters with raw string literals.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-redundant-void-arg", Description = "Find and remove redundant void argument lists.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-replace-auto-ptr", Description = "This check replaces the uses of the deprecated class std::auto_ptr by std::unique_ptr (introduced in C++11). The transfer of ownership, done by the copy-constructor and the assignment operator, is changed to match std::unique_ptr usage by using explicit calls to std::move().", IsChecked = false },
    new TidyCheckModel{Name = "modernize-replace-random-shuffle", Description = "This check will find occurrences of std::random_shuffle and replace it with std::shuffle. In C++17 std::random_shuffle will no longer be available and thus we need to replace it.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-return-braced-init-list", Description = "Replaces explicit calls to the constructor in a return with a braced initializer list. This way the return type is not needlessly duplicated in the function definition and the return statement.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-shrink-to-fit", Description = "Replace copy and swap tricks on shrinkable containers with the shrink_to_fit() method call.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-unary-static-assert", Description = "The check diagnoses any static_assert declaration with an empty string literal and provides a fix-it to replace the declaration with a single-argument static_assert declaration.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-use-auto", Description = "This check is responsible for using the auto type specifier for variable declarations to improve code readability and maintainability. For example:", IsChecked = false },
    new TidyCheckModel{Name = "modernize-use-bool-literals", Description = "Finds integer literals which are cast to bool.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-use-default-member-init", Description = "This check converts a default constructor’s member initializers into the new default member initializers in C++11. Other member initializers that match the default member initializer are removed. This can reduce repeated code or allow use of ‘= default’.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-use-emplace", Description = "The check flags insertions to an STL-style container done by calling the push_back method with an explicitly-constructed temporary of the container element type. In this case, the corresponding emplace_back method results in less verbose and potentially more efficient code. Right now the check doesn’t support push_front and insert. It also doesn’t support insert functions for associative containers because replacing insert with emplace may result in speed regression, but it might get support with some addition flag in the future.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-use-equals-default", Description = "This check replaces default bodies of special member functions with = default;. The explicitly defaulted function declarations enable more opportunities in optimization, because the compiler might treat explicitly defaulted functions as trivial.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-use-equals-delete", Description = "This check marks unimplemented private special member functions with = delete. To avoid false-positives, this check only applies in a translation unit that has all other member functions implemented.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-use-nodiscard", Description = "Adds [[nodiscard]] attributes (introduced in C++17) to member functions in order to highlight at compile time which return values should not be ignored.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-use-noexcept", Description = "This check replaces deprecated dynamic exception specifications with the appropriate noexcept specification (introduced in C++11).  By default this check will replace throw() with noexcept, and throw(&lt;exception&gt;[,...]) or throw(...) with noexcept(false).", IsChecked = false },
    new TidyCheckModel{Name = "modernize-use-nullptr", Description = "The check converts the usage of null pointer constants (eg. NULL, 0) to use the new C++11 nullptr keyword.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-use-override", Description = "Adds override (introduced in C++11) to overridden virtual functions and removes virtual from those functions as it is not required.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-use-trailing-return-type", Description = "Rewrites function signatures to use a trailing return type (introduced in C++11). This transformation is purely stylistic. The return type before the function name is replaced by auto and inserted after the function parameter list (and qualifiers).", IsChecked = false },
    new TidyCheckModel{Name = "modernize-use-transparent-functors", Description = "Prefer transparent functors to non-transparent ones. When using transparent functors, the type does not need to be repeated. The code is easier to read, maintain and less prone to errors. It is not possible to introduce unwanted conversions.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-use-uncaught-exceptions", Description = "This check will warn on calls to std::uncaught_exception and replace them with calls to std::uncaught_exceptions, since std::uncaught_exception was deprecated in C++17.", IsChecked = false },
    new TidyCheckModel{Name = "modernize-use-using", Description = "The check converts the usage of typedef with using keyword.", IsChecked = false },
    new TidyCheckModel{Name = "mpi-buffer-deref", Description = "This check verifies if a buffer passed to an MPI (Message Passing Interface) function is sufficiently dereferenced. Buffers should be passed as a single pointer or array. As MPI function signatures specify void * for their buffer types, insufficiently dereferenced buffers can be passed, like for example as double pointers or multidimensional arrays, without a compiler warning emitted.", IsChecked = false },
    new TidyCheckModel{Name = "mpi-type-mismatch", Description = "This check verifies if buffer type and MPI (Message Passing Interface) datatype pairs match for used MPI functions. All MPI datatypes defined by the MPI standard (3.1) are verified by this check. User defined typedefs, custom MPI datatypes and null pointer constants are skipped, in the course of verification.", IsChecked = false },
    new TidyCheckModel{Name = "nullability.NullableDereferenced", Description = "Warns when a nullable pointer is dereferenced. ", IsChecked = false },
    new TidyCheckModel{Name = "nullability.NullablePassedToNonnull", Description = "Warns when a nullable pointer is passed to a pointer which has a _Nonnull type. ", IsChecked = false },
    new TidyCheckModel{Name = "nullability.NullPassedToNonnull", Description = "Warns when a null pointer is passed to a pointer which has a _Nonnull type. ", IsChecked = false },
    new TidyCheckModel{Name = "nullability.NullReturnedFromNonnull", Description = "Warns when a null pointer is returned from a function that has _Nonnull return type. ", IsChecked = false },
    new TidyCheckModel{Name = "objc-avoid-nserror-init", Description = "Finds improper initialization of NSError objects.", IsChecked = false },
    new TidyCheckModel{Name = "objc-avoid-spinlock", Description = "Finds usages of OSSpinlock, which is deprecated due to potential livelock problems.", IsChecked = false },
    new TidyCheckModel{Name = "objc-forbidden-subclassing", Description = "Finds Objective-C classes which are subclasses of classes which are not designed to be subclassed.", IsChecked = false },
    new TidyCheckModel{Name = "objc-property-declaration", Description = "Finds property declarations in Objective-C files that do not follow the pattern of property names in Apple’s programming guide. The property name should be in the format of Lower Camel Case.", IsChecked = false },
    new TidyCheckModel{Name = "objc-super-self", Description = "Finds invocations of -self on super instances in initializers of subclasses of NSObject and recommends calling a superclass initializer instead.", IsChecked = false },
    new TidyCheckModel{Name = "openmp-exception-escape", Description = "Analyzes OpenMP Structured Blocks and checks that no exception escapes out of the Structured Block it was thrown in.", IsChecked = false },
    new TidyCheckModel{Name = "openmp-use-default-none", Description = "Finds OpenMP directives that are allowed to contain a default clause, but either don’t specify it or the clause is specified but with the kind other than none, and suggests to use the default(none) clause.", IsChecked = false },
    new TidyCheckModel{Name = "optin.cplusplus.VirtualCall", Description = "Check virtual member function calls during construction or destruction. ", IsChecked = false },
    new TidyCheckModel{Name = "optin.mpi.MPI-Checker", Description = "Checks MPI code ", IsChecked = false },
    new TidyCheckModel{Name = "optin.osx.cocoa.localizability.EmptyLocalizationContextChecker", Description = "Check that NSLocalizedString macros include a comment for context. ", IsChecked = false },
    new TidyCheckModel{Name = "optin.osx.cocoa.localizability.NonLocalizedStringChecker", Description = "Warns about uses of non-localized NSStrings passed to UI methods expecting localized NSStrings ", IsChecked = false },
    new TidyCheckModel{Name = "osx.API", Description = "Check for proper uses of various Apple APIs: dispatch_once ", IsChecked = false },
    new TidyCheckModel{Name = "osx.cocoa.AtSync", Description = "Check for nil pointers used as mutexes for @synchronized. ", IsChecked = false },
    new TidyCheckModel{Name = "osx.cocoa.ClassRelease", Description = "Check for sending retain, release, or  autorelease directly to a class. ", IsChecked = false },
    new TidyCheckModel{Name = "osx.cocoa.Dealloc", Description = "Warn about Objective-C classes that lack a correct implementation of -dealloc. ", IsChecked = false },
    new TidyCheckModel{Name = "osx.cocoa.IncompatibleMethodTypes", Description = "Check for an incompatible type signature when overriding an Objective-C method. ", IsChecked = false },
    new TidyCheckModel{Name = "osx.cocoa.MissingSuperCall", Description = "Warn about Objective-C methods that lack a necessary call to super. (Note: The compiler now has a warning for methods annotated with objc_requires_super attribute. The checker exists to check methods in the Cocoa frameworks that haven't yet adopted this attribute.) ", IsChecked = false },
    new TidyCheckModel{Name = "osx.cocoa.NilArg", Description = "Check for prohibited nil arguments in specific Objective-C method calls: - caseInsensitiveCompare: - compare: - compare:options: - compare:options:range: - compare:options:range:locale: - componentsSeparatedByCharactersInSet: - initWithFormat: ", IsChecked = false },
    new TidyCheckModel{Name = "osx.cocoa.NSAutoreleasePool", Description = "Warn for suboptimal uses of NSAutoreleasePool in Objective-C GC mode (-fobjc-gc compiler option). ", IsChecked = false },
    new TidyCheckModel{Name = "osx.cocoa.NSError", Description = "Check usage of NSError** parameters. ", IsChecked = false },
    new TidyCheckModel{Name = "osx.cocoa.ObjCGenerics", Description = "Check for type errors when using Objective-C generics ", IsChecked = false },
    new TidyCheckModel{Name = "osx.cocoa.RetainCount", Description = "Check for leaks and violations of the Cocoa Memory Management rules. ", IsChecked = false },
    new TidyCheckModel{Name = "osx.cocoa.SelfInit", Description = "Check that self is properly initialized inside an initializer method. ", IsChecked = false },
    new TidyCheckModel{Name = "osx.cocoa.SuperDealloc", Description = "Warn about improper use of '[super dealloc]' in Objective-C ", IsChecked = false },
    new TidyCheckModel{Name = "osx.cocoa.UnusedIvars", Description = "Warn about private ivars that are never used. ", IsChecked = false },
    new TidyCheckModel{Name = "osx.cocoa.VariadicMethodTypes", Description = "Check for passing non-Objective-C types to variadic collection initialization methods that expect only Objective-C types. ", IsChecked = false },
    new TidyCheckModel{Name = "osx.coreFoundation.CFError", Description = "Check usage of CFErrorRef* parameters. ", IsChecked = false },
    new TidyCheckModel{Name = "osx.coreFoundation.CFNumber", Description = "Check for improper uses of CFNumberCreate. ", IsChecked = false },
    new TidyCheckModel{Name = "osx.coreFoundation.CFRetainRelease", Description = "Check for null arguments to CFRetain, CFRelease, CFMakeCollectable. ", IsChecked = false },
    new TidyCheckModel{Name = "osx.coreFoundation.containers.OutOfBounds", Description = "Checks for index out-of-bounds when using CFArray API. ", IsChecked = false },
    new TidyCheckModel{Name = "osx.coreFoundation.containers.PointerSizedValues", Description = "Warns if CFArray, CFDictionary, CFSet are created with non-pointer-size values. ", IsChecked = false },
    new TidyCheckModel{Name = "osx.NumberObjectConversion", Description = "Check for erroneous conversions of objects representing numbers into numbers ", IsChecked = false },
    new TidyCheckModel{Name = "osx.SecKeychainAPI", Description = "Check for improper uses of the Security framework's Keychain APIs: SecKeychainItemCopyContent SecKeychainFindGenericPassword SecKeychainFindInternetPassword SecKeychainItemFreeContent SecKeychainItemCopyAttributesAndData SecKeychainItemFreeAttributesAndData ", IsChecked = false },
    new TidyCheckModel{Name = "performance-faster-string-find", Description = "Optimize calls to std::string::find() and friends when the needle passed is a single character string literal. The character literal overload is more efficient.", IsChecked = false },
    new TidyCheckModel{Name = "performance-for-range-copy", Description = "Finds C++11 for ranges where the loop variable is copied in each iteration but it would suffice to obtain it by const reference.", IsChecked = false },
    new TidyCheckModel{Name = "performance-implicit-conversion-in-loop", Description = "This warning appears in a range-based loop with a loop variable of const ref type where the type of the variable does not match the one returned by the iterator. This means that an implicit conversion happens, which can for example result in expensive deep copies.", IsChecked = false },
    new TidyCheckModel{Name = "performance-inefficient-algorithm", Description = "Warns on inefficient use of STL algorithms on associative containers.", IsChecked = false },
    new TidyCheckModel{Name = "performance-inefficient-string-concatenation", Description = "This check warns about the performance overhead arising from concatenating strings using the operator+, for instance:", IsChecked = false },
    new TidyCheckModel{Name = "performance-inefficient-vector-operation", Description = "Finds possible inefficient std::vector operations (e.g. push_back, emplace_back) that may cause unnecessary memory reallocations.", IsChecked = false },
    new TidyCheckModel{Name = "performance-move-const-arg", Description = "The check warns", IsChecked = false },
    new TidyCheckModel{Name = "performance-move-constructor-init", Description = "“cert-oop11-cpp” redirects here as an alias for this check.", IsChecked = false },
    new TidyCheckModel{Name = "performance-noexcept-move-constructor", Description = "The check flags user-defined move constructors and assignment operators not marked with noexcept or marked with noexcept(expr) where expr evaluates to false (but is not a false literal itself).", IsChecked = false },
    new TidyCheckModel{Name = "performance-type-promotion-in-math-fn", Description = "Finds calls to C math library functions (from math.h or, in C++, cmath) with implicit float to double promotions.", IsChecked = false },
    new TidyCheckModel{Name = "performance-unnecessary-copy-initialization", Description = "Finds local variable declarations that are initialized using the copy constructor of a non-trivially-copyable type but it would suffice to obtain a const reference.", IsChecked = false },
    new TidyCheckModel{Name = "performance-unnecessary-value-param", Description = "Flags value parameter declarations of expensive to copy types that are copied for each invocation but it would suffice to pass them by const reference.", IsChecked = false },
    new TidyCheckModel{Name = "portability-simd-intrinsics", Description = "Finds SIMD intrinsics calls and suggests std::experimental::simd (P0214) alternatives.", IsChecked = false },
    new TidyCheckModel{Name = "readability-avoid-const-params-in-decls", Description = "Checks whether a function declaration has parameters that are top level const.", IsChecked = false },
    new TidyCheckModel{Name = "readability-braces-around-statements", Description = "google-readability-braces-around-statements redirects here as an alias for this check.", IsChecked = false },
    new TidyCheckModel{Name = "readability-const-return-type", Description = "Checks for functions with a const-qualified return type and recommends removal of the const keyword. Such use of const is usually superfluous, and can prevent valuable compiler optimizations.  Does not (yet) fix trailing return types.", IsChecked = false },
    new TidyCheckModel{Name = "readability-container-size-empty", Description = "Checks whether a call to the size() method can be replaced with a call to empty().", IsChecked = false },
    new TidyCheckModel{Name = "readability-convert-member-functions-to-static", Description = "Finds non-static member functions that can be made static because the functions don’t use this.", IsChecked = false },
    new TidyCheckModel{Name = "readability-deleted-default", Description = "Checks that constructors and assignment operators marked as = default are not actually deleted by the compiler.", IsChecked = false },
    new TidyCheckModel{Name = "readability-delete-null-pointer", Description = "Checks the if statements where a pointer’s existence is checked and then deletes the pointer. The check is unnecessary as deleting a null pointer has no effect.", IsChecked = false },
    new TidyCheckModel{Name = "readability-else-after-return", Description = "LLVM Coding Standards advises to reduce indentation where possible and where it makes understanding code easier. Early exit is one of the suggested enforcements of that. Please do not use else or else if after something that interrupts control flow - like return, break, continue, throw.", IsChecked = false },    new TidyCheckModel{Name = "readability-function-size", Description = "google-readability-function-size redirects here as an alias for this check.", IsChecked = false },
    new TidyCheckModel{Name = "readability-identifier-naming", Description = "Checks for identifiers naming style mismatch.", IsChecked = false },
    new TidyCheckModel{Name = "readability-implicit-bool-conversion", Description = "This check can be used to find implicit conversions between built-in types and booleans. Depending on use case, it may simply help with readability of the code, or in some cases, point to potential bugs which remain unnoticed due to implicit conversions.", IsChecked = false },
    new TidyCheckModel{Name = "readability-inconsistent-declaration-parameter-name", Description = "Find function declarations which differ in parameter names.", IsChecked = false },
    new TidyCheckModel{Name = "readability-isolate-declaration", Description = "Detects local variable declarations declaring more than one variable and tries to refactor the code to one statement per declaration.", IsChecked = false },
    new TidyCheckModel{Name = "readability-magic-numbers", Description = "Detects magic numbers, integer or floating point literals that are embedded in code and not introduced via constants or symbols.", IsChecked = false },
    new TidyCheckModel{Name = "readability-misleading-indentation", Description = "Correct indentation helps to understand code. Mismatch of the syntactical structure and the indentation of the code may hide serious problems. Missing braces can also make it significantly harder to read the code, therefore it is important to use braces.", IsChecked = false },
    new TidyCheckModel{Name = "readability-misplaced-array-index", Description = "This check warns for unusual array index syntax.", IsChecked = false },
    new TidyCheckModel{Name = "readability-named-parameter", Description = "Find functions with unnamed arguments.", IsChecked = false },
    new TidyCheckModel{Name = "readability-non-const-parameter", Description = "The check finds function parameters of a pointer type that could be changed to point to a constant type instead.", IsChecked = false },
    new TidyCheckModel{Name = "readability-redundant-control-flow", Description = "This check looks for procedures (functions returning no value) with return statements at the end of the function. Such return statements are redundant.", IsChecked = false },
    new TidyCheckModel{Name = "readability-redundant-declaration", Description = "Finds redundant variable and function declarations.", IsChecked = false },
    new TidyCheckModel{Name = "readability-redundant-function-ptr-dereference", Description = "Finds redundant dereferences of a function pointer.", IsChecked = false },
    new TidyCheckModel{Name = "readability-redundant-member-init", Description = "Finds member initializations that are unnecessary because the same default constructor would be called if they were not present.", IsChecked = false },
    new TidyCheckModel{Name = "readability-redundant-preprocessor", Description = "Finds potentially redundant preprocessor directives. At the moment the following cases are detected:", IsChecked = false },
    new TidyCheckModel{Name = "readability-redundant-smartptr-get", Description = "Find and remove redundant calls to smart pointer’s .get() method.", IsChecked = false },
    new TidyCheckModel{Name = "readability-redundant-string-cstr", Description = "Finds unnecessary calls to std::string::c_str() and std::string::data().", IsChecked = false },
    new TidyCheckModel{Name = "readability-redundant-string-init", Description = "Finds unnecessary string initializations.", IsChecked = false },
    new TidyCheckModel{Name = "readability-simplify-boolean-expr", Description = "Looks for boolean expressions involving boolean constants and simplifies them to use the appropriate boolean expression directly.", IsChecked = false },
    new TidyCheckModel{Name = "readability-simplify-subscript-expr", Description = "This check simplifies subscript expressions. Currently this covers calling .data() and immediately doing an array subscript operation to obtain a single element, in which case simply calling operator[] suffice.", IsChecked = false },
    new TidyCheckModel{Name = "readability-static-accessed-through-instance", Description = "Checks for member expressions that access static members through instances, and replaces them with uses of the appropriate qualified-id.", IsChecked = false },
    new TidyCheckModel{Name = "readability-static-definition-in-anonymous-namespace", Description = "Finds static function and variable definitions in anonymous namespace.", IsChecked = false },
    new TidyCheckModel{Name = "readability-string-compare", Description = "Finds string comparisons using the compare method.", IsChecked = false },
    new TidyCheckModel{Name = "readability-uniqueptr-delete-release", Description = "Replace delete &lt;unique_ptr&gt;.release() with &lt;unique_ptr&gt; = nullptr. The latter is shorter, simpler and does not require use of raw pointer APIs.", IsChecked = false },
    new TidyCheckModel{Name = "readability-uppercase-literal-suffix", Description = "cert-dcl16-c redirects here as an alias for this check. By default, only the suffixes that begin with l (l, ll, lu, llu, but not u, ul, ull) are diagnosed by that alias.", IsChecked = false },
    new TidyCheckModel{Name = "security.FloatLoopCounter", Description = "Warn on using a floating point value as a loop counter (CERT: FLP30-C, FLP30-CPP). ", IsChecked = false },
    new TidyCheckModel{Name = "security.insecureAPI.bcmp", Description = "Warn on uses of the bcmp function. ", IsChecked = false },
    new TidyCheckModel{Name = "security.insecureAPI.bcopy", Description = "Warn on uses of the bcopy function. ", IsChecked = false },
    new TidyCheckModel{Name = "security.insecureAPI.bzero", Description = "Warn on uses of the bzero function. ", IsChecked = false },
    new TidyCheckModel{Name = "security.insecureAPI.getpw", Description = "Warn on uses of the getpw function. ", IsChecked = false },
    new TidyCheckModel{Name = "security.insecureAPI.gets", Description = "Warn on uses of the gets function. ", IsChecked = false },
    new TidyCheckModel{Name = "security.insecureAPI.mkstemp", Description = "Warn when mktemp, mkstemp, mkstemps or mkdtemp is passed fewer than 6 X's in the format string. ", IsChecked = false },
    new TidyCheckModel{Name = "security.insecureAPI.mktemp", Description = "Warn on uses of the mktemp function. ", IsChecked = false },
    new TidyCheckModel{Name = "security.insecureAPI.rand", Description = "Warn on uses of inferior random number generating functions (only if arc4random function is available): drand48 erand48 jrand48 lcong48 lrand48 mrand48 nrand48 random rand_r ", IsChecked = false },
    new TidyCheckModel{Name = "security.insecureAPI.strcpy", Description = "Warn on uses of the strcpy and strcat functions. ", IsChecked = false },
    new TidyCheckModel{Name = "security.insecureAPI.UncheckedReturn", Description = "Warn on uses of functions whose return values must be always checked: setuid setgid seteuid setegid setreuid setregid ", IsChecked = false },
    new TidyCheckModel{Name = "security.insecureAPI.vfork", Description = "Warn on uses of the vfork function. ", IsChecked = false },
    new TidyCheckModel{Name = "unix.API", Description = "Check calls to various UNIX/POSIX functions: open pthread_once calloc malloc realloc alloca ", IsChecked = false },
    new TidyCheckModel{Name = "unix.cstring.BadSizeArg", Description = "Check the size argument passed to strncat for common erroneous patterns. Use -Wno-strncat-size compiler option to mute other strncat-related compiler warnings. ", IsChecked = false },
    new TidyCheckModel{Name = "unix.cstring.NullArg", Description = "Check for null pointers being passed as arguments to C string functions: strlen strnlen strcpy strncpy strcat strncat strcmp strncmp strcasecmp strncasecmp ", IsChecked = false },
    new TidyCheckModel{Name = "unix.Malloc", Description = "Check for memory leaks, double free, and use-after-free and offset problems involving malloc. ", IsChecked = false },
    new TidyCheckModel{Name = "unix.MallocSizeof", Description = "Check for dubious malloc, calloc or realloc arguments involving sizeof. ", IsChecked = false },
    new TidyCheckModel{Name = "unix.MismatchedDeallocator", Description = "Check for mismatched deallocators (e.g. passing a pointer allocating with new to free()). ", IsChecked = false },
    new TidyCheckModel{Name = "unix.Vfork", Description = "Check for proper usage of vfork ", IsChecked = false },
    new TidyCheckModel{Name = "zircon-temporary-objects", Description = "Warns on construction of specific temporary objects in the Zircon kernel. If the object should be flagged, If the object should be flagged, the fully qualified type name must be explicitly passed to the check.", IsChecked = false },
  };
  }
}
